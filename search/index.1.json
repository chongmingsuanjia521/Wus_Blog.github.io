[{"authors":[],"categories":[{"title":"Java后端开发","url":"/categories/java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"content":" Spring事务详解（基于苍穹外卖项目学习） 最近在学习苍穹外卖项目时，接触到了 Spring 中的事务（@Transactional 注解）。为加深理解，我查阅了一些高质量文章并进行总结，本文将以知识笔记的形式，系统性地讲解 Spring 中的事务机制，便于自己日后查阅与回顾。\n参考文章：\nhttps://javaguide.cn/system-design/framework/spring/spring-transaction.html https://zhuanlan.zhihu.com/p/433276682 一、什么是事务？ 事务（Transaction）是指一组操作的集合，这些操作要么全部成功执行，要么全部不执行，是数据库操作中的基本单位。\n二、事务的ACID特性 事务必须具备以下四个特性（ACID）：\n特性 含义 说明 原子性 (Atomicity) 不可分割 事务作为最小的执行单位，要么全部执行，要么全部回滚 一致性 (Consistency) 数据保持一致 事务执行前后，数据库始终处于一致状态，例如转账时账户总金额不变 隔离性 (Isolation) 并发时互不影响 多个事务并发执行时，各自互不干扰 持久性 (Durability) 一旦提交永久生效 提交后的数据更改是永久性的，即使系统崩溃也不会丢失 补充理解： AID是实现手段，C是一致性目标，只有保障了原子性、隔离性、持久性，一致性才能得以实现。\n三、Spring事务管理机制 Spring 提供了对事务管理的高度抽象和封装，核心接口如下：\nPlatformTransactionManager：事务管理器，定义了事务的基本操作接口。 TransactionDefinition：事务的定义信息，包括隔离级别、传播行为、是否只读、超时时间等。 TransactionStatus：事务的运行状态，包含事务是否新建、是否回滚、是否完成等信息。 1. PlatformTransactionManager Spring 提供了多个事务管理器的实现，常见如下：\n平台 实现类 JDBC DataSourceTransactionManager Hibernate HibernateTransactionManager JPA JpaTransactionManager 使用方式示例：\n1TransactionStatus status = txManager.getTransaction(definition); 2txManager.commit(status); 2. TransactionDefinition（事务属性） 传播行为（Propagation） 隔离级别（Isolation） 超时时间（timeout） 是否只读（readOnly） 异常回滚策略 3. TransactionStatus（事务状态） 1public interface TransactionStatus { 2 boolean isNewTransaction(); // 是否为新事务 3 boolean hasSavepoint(); // 是否有保存点 4 void setRollbackOnly(); // 设置为回滚状态 5 boolean isRollbackOnly(); // 是否处于回滚状态 6 boolean isCompleted(); // 是否已完成 7} 四、事务属性详解 1. 事务传播行为（Propagation） 类型 含义 行为描述 REQUIRED 默认传播行为 如果当前没有事务，则新建事务；如果存在事务，则加入当前事务 REQUIRES_NEW 总是新建事务 如果当前存在事务，则挂起当前事务，创建一个新的事务 NESTED 嵌套事务 如果当前存在事务，则在嵌套事务中执行（有保存点），否则表现为 REQUIRED SUPPORTS 支持事务 如果当前有事务，则加入事务；如果没有事务，则以非事务方式执行 NOT_SUPPORTED 不支持事务 总是以非事务方式执行；如果当前存在事务，则挂起当前事务 NEVER 不允许事务 总是以非事务方式执行；如果当前存在事务，则抛出异常 MANDATORY 必须存在事务 如果当前存在事务，则加入事务；如果没有事务，则抛出异常 2. 事务隔离级别（Isolation） 隔离级别 行为描述 问题类型 性能 READ UNCOMMITTED 允许读取尚未提交的数据 可能出现脏读、不可重复读、幻读 最好 READ COMMITTED 只能读取已提交的数据 可防止脏读，仍可能出现不可重复读、幻读 较好（Oracle 默认） REPEATABLE READ 同一事务中多次读取结果一致，其他事务无法修改已读取数据 可防止脏读、不可重复读，可能有幻读 一般（MySQL 默认） SERIALIZABLE 完全串行化执行事务，防止一切并发问题 可防止所有问题，但性能最差 最差 虚读/幻读：指某事务在两次查询中，其他事务插入了新数据，导致查询结果数量不同。\n3. 事务超时设置 事务超过指定时间未完成，会自动回滚。默认值为 -1，单位是秒。\n1@Transactional(timeout = 10) // 最长执行时间10秒 4. 只读事务 适用于只读操作，数据库可能进行优化，提升查询性能。\n1@Transactional(readOnly = true) 五、@Transactional 注解详解 Spring推荐使用 @Transactional 注解来声明式地管理事务。\n作用范围：类上或方法上（推荐方法上） 不支持接口上使用 仅支持 public 方法上使用 常用属性 属性 说明 默认值 propagation 传播行为 REQUIRED isolation 隔离级别 默认数据库隔离级别 timeout 超时时间 -1（无限） readOnly 是否只读 false rollbackFor 回滚异常类型 RuntimeException 六、事务失效的几种常见情况 情况 说明 修饰方法非 public Spring AOP 基于代理，仅对 public 方法有效 内部方法调用 类内部方法调用不会经过代理，事务不生效 未被 Spring 管理 如未使用 @Component 等注解注册 Bean，事务不生效 数据库不支持事务 如 MyISAM 引擎不支持事务 配置错误 如未正确配置事务管理器或注解 七、使用事务的最佳实践总结 避免在接口上使用 @Transactional 注解； 避免类内部调用事务方法，必要时通过注入方式调用； 指定 rollbackFor，保证异常正确触发回滚； 尽量控制事务范围，不要在事务中处理不必要的逻辑； 使用只读事务优化查询方法； 明确设置事务传播行为，避免传播嵌套问题； 八、Spring Boot 中使用事务示例 下面是一个使用 Spring Boot + MyBatis 的简单事务示例，展示了 @Transactional 的基本使用：\n1@Service 2public class AccountService { 3 4 @Autowired 5 private AccountMapper accountMapper; 6 7 @Transactional(rollbackFor = Exception.class) 8 public void transfer(String fromUser, String toUser, Integer amount) { 9 // 减去转出用户的钱 10 accountMapper.decrease(fromUser, amount); 11 12 // 模拟异常：如除以0会触发事务回滚 13 int error = 1 / 0; 14 15 // 增加接收用户的钱 16 accountMapper.increase(toUser, amount); 17 } 18} 注意：\n被注解方法必须为 public 抛出的异常必须匹配 rollbackFor 如果发生异常，所有数据库操作都会回滚 如果你也在学习 Spring 项目开发，建议结合实际代码、调试日志、数据库回滚等实际效果，多动手实验，才能真正掌握事务机制的运作细节。\n","date":"2025年8月4日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2025/08/spring%E4%BA%8B%E5%8A%A1/","series":[],"smallImg":"","tags":[{"title":"事务","url":"/tags/%E4%BA%8B%E5%8A%A1/"},{"title":"Spring","url":"/tags/spring/"},{"title":"Springboot","url":"/tags/springboot/"},{"title":"Java","url":"/tags/java/"}],"timestamp":1754308678,"title":"Spring事务"},{"authors":[],"categories":[{"title":"Java后端开发","url":"/categories/java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"content":"这两天在学习苍穹外卖，发现之前学的PageHelper用法忘了，所以阅读了官方文档和相关技术博客，自己再做一个复习。\n1.引入依赖 如果用的是maven，导入以下依赖：\n1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;com.github.pagehelper\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;pagehelper-spring-boot-starter\u0026lt;/artifactId\u0026gt; 4\u0026lt;/dependency\u0026gt; 2.相关配置 application配置 完整配置参考 https://github.com/abel533/MyBatis-Spring-Boot/blob/master/src/main/resources/application-old.yml\n以下是和Mybatis相关配置\n1mybatis: 2 type-aliases-package: tk.mybatis.springboot.model 3 mapper-locations: classpath:mapper/*.xml 4 5mapper: 6 mappers: 7 - tk.mybatis.springboot.util.MyMapper 8 not-empty: false 9 identity: MYSQL 10 11pagehelper: 12 helperDialect: mysql 13 reasonable: true 14 supportMethodsArguments: true 15 params: count=countSql 3.在代码中使用 下面演示以下苍穹外卖员工分页查询（根据name模糊查询）相关代码:\nController层 1//controller层 2 @GetMapping(\u0026#34;/page\u0026#34;) 3 @ApiOperation(\u0026#34;分页查询员工\u0026#34;)//swagger接口标签 4 public Result\u0026lt;PageResult\u0026gt; PageQuery(EmployeePageQueryDTO employeePageQueryDTO){ 5 log.info(\u0026#34;分页查询,{}\u0026#34;,employeePageQueryDTO); 6 PageResult pageResult= employeeService.pagequery(employeePageQueryDTO); 7 return Result.success(pageResult); 8 } 定义PageResult,用来封装查询记录总数和分页查询结果,如下： 1@Data 2@AllArgsConstructor 3@NoArgsConstructor 4public class PageResult implements Serializable { 5 6 private long total; //总记录数 7 8 private List records; //当前页数据集合 9 10} Service层 1//Service层 2 public PageResult pagequery(EmployeePageQueryDTO employeePageQueryDTO) { 3 PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize()); 4 Page\u0026lt;Employee\u0026gt; page =employeeMapper.pagequery(employeePageQueryDTO); 5 PageResult pageResult=new PageResult(); 6 pageResult.setRecords(page.getResult()); 7 pageResult.setTotal(page.getTotal()); 8 return pageResult; 9 } 在Service层用到PageHelper的核心用法： 开始分页：调用静态方法：\n1PageHelper.startPage(page,pageSize)； 其中，page为起始页码，pageSize为页面大小\n调用Mapper方法查询所需数据列表,类型为Page(或为所需类型)\n注：Page 属性（继承自 ArrayList） 属性名 类型 描述 pageNum int 当前页码 pageSize int 每页记录数 startRow int 当前页的起始行（包含） endRow int 当前页的结束行（包含） total long 总记录数 pages int 总页数 result List 当前页的数据列表（等同于本身） reasonable boolean 是否启用合理化分页 用getResult()方法获取页面结果，getTotal获取总记录数\n1//mapper层 2Page\u0026lt;Employee\u0026gt; pagequery(EmployeePageQueryDTO employeePageQueryDTO); 3 //employeeMapper.xml 4 \u0026lt;select id=\u0026#34;pagequery\u0026#34; resultType=\u0026#34;com.sky.entity.Employee\u0026#34;\u0026gt; 5 6 SELECT * FROM employee 7 \u0026lt;where\u0026gt; 8 \u0026lt;if test=\u0026#34;name != null and name != \u0026#39;\u0026#39;\u0026#34;\u0026gt; 9 AND name LIKE CONCAT(\u0026#39;%\u0026#39;, #{name}, \u0026#39;%\u0026#39;) 10 \u0026lt;/if\u0026gt; 11 \u0026lt;/where\u0026gt; 12 ORDER BY create_time DESC 13 14 \u0026lt;/select\u0026gt; ","date":"2025年8月2日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2025/08/pagehelper%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","series":[],"smallImg":"","tags":[{"title":"Springboot","url":"/tags/springboot/"},{"title":"Mybatis","url":"/tags/mybatis/"},{"title":"Pagehelper","url":"/tags/pagehelper/"}],"timestamp":1754098269,"title":"Pagehelper在Springboot项目中的使用方法"},{"authors":[],"categories":[],"content":"这是一篇笔记\n","date":"2025年7月24日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/notes/git%E7%AC%94%E8%AE%B0.zh-cn/","series":[],"smallImg":"","tags":[],"timestamp":1753360442,"title":"Git笔记"},{"authors":[],"categories":[],"content":" Git 常用命令 1. 配置命令 1# 设置全局用户名和邮箱 2git config --global user.name \u0026#34;你的用户名\u0026#34; 3git config --global user.email \u0026#34;你的邮箱\u0026#34; 4 5# 查看配置信息 6git config --list 2. 初始化和基本操作 1# 初始化仓库 2git init 3 4# 克隆远程仓库 5git clone \u0026lt;repository-url\u0026gt; 6 7# 添加文件到暂存区 8git add \u0026lt;file-name\u0026gt; # 添加指定文件 9git add . # 添加所有文件 10 11# 提交更改 12git commit -m \u0026#34;提交说明\u0026#34; 13git commit -am \u0026#34;提交说明\u0026#34; # 合并 add 和 commit 3. 分支操作 1# 查看分支 2git branch # 查看本地分支 3git branch -r # 查看远程分支 4git branch -a # 查看所有分支 5 6# 创建分支 7git branch \u0026lt;branch-name\u0026gt; 8 9# 切换分支 10git checkout \u0026lt;branch-name\u0026gt; 11git switch \u0026lt;branch-name\u0026gt; # Git 2.23+ 新命令 12 13# 创建并切换分支 14git checkout -b \u0026lt;branch-name\u0026gt; 15git switch -c \u0026lt;branch-name\u0026gt; 16 17# 删除分支 18git branch -d \u0026lt;branch-name\u0026gt; # 删除本地分支 19git branch -D \u0026lt;branch-name\u0026gt; # 强制删除本地分支 20git push origin --delete \u0026lt;branch-name\u0026gt; # 删除远程分支 4. 远程仓库操作 1# 添加远程仓库 2git remote add origin \u0026lt;repository-url\u0026gt; 3 4# 查看远程仓库 5git remote -v 6 7# 推送到远程 8git push origin \u0026lt;branch-name\u0026gt; 9git push -u origin \u0026lt;branch-name\u0026gt; # 首次推送并设置上游分支 10 11# 拉取更新 12git pull origin \u0026lt;branch-name\u0026gt; 13git fetch origin # 获取远程更新但不合并 5. 状态和差异查看 1# 查看状态 2git status 3 4# 查看差异 5git diff # 工作区与暂存区的差异 6git diff --staged # 暂存区与最后一次提交的差异 7git diff \u0026lt;commit1\u0026gt; \u0026lt;commit2\u0026gt; # 两个提交之间的差异 6. 历史记录 1# 查看提交历史 2git log 3git log --oneline # 简洁模式 4git log --graph # 图形模式显示 5git reflog # 查看操作历史 7. 撤销和重置 1# 撤销工作区修改 2git checkout -- \u0026lt;file-name\u0026gt; 3git restore \u0026lt;file-name\u0026gt; # Git 2.23+ 新命令 4 5# 取消暂存 6git reset HEAD \u0026lt;file-name\u0026gt; 7git restore --staged \u0026lt;file-name\u0026gt; 8 9# 重置到指定提交 10git reset --soft \u0026lt;commit\u0026gt; # 保留工作区和暂存区修改 11git reset --mixed \u0026lt;commit\u0026gt; # 保留工作区修改（默认） 12git reset --hard \u0026lt;commit\u0026gt; # 清除所有修改 8. 暂存和合并 1# 暂存当前修改 2git stash 3git stash save \u0026#34;说明文字\u0026#34; 4 5# 查看暂存列表 6git stash list 7 8# 应用暂存 9git stash apply # 应用最近的暂存（不删除暂存记录） 10git stash pop # 应用最近的暂存（删除暂存记录） 11 12# 合并分支 13git merge \u0026lt;branch-name\u0026gt; 14git rebase \u0026lt;branch-name\u0026gt; # 变基 9. 标签管理 1# 创建标签 2git tag \u0026lt;tag-name\u0026gt; 3git tag -a \u0026lt;tag-name\u0026gt; -m \u0026#34;说明文字\u0026#34; 4 5# 查看标签 6git tag 7git show \u0026lt;tag-name\u0026gt; 8 9# 推送标签 10git push origin \u0026lt;tag-name\u0026gt; 11git push origin --tags # 推送所有标签 10. 高级技巧 1# 清理仓库 2git clean -f # 删除未跟踪文件 3git clean -fd # 删除未跟踪文件和目录 4 5# 修改最后一次提交 6git commit --amend 7 8# 查找内容 9git grep \u0026#34;查找的内容\u0026#34; 10 11# 锁定文件 12git update-index --assume-unchanged \u0026lt;file\u0026gt; 13git update-index --no-assume-unchanged \u0026lt;file\u0026gt; 最佳实践建议 经常性地提交代码，保持提交粒度适中 编写清晰的提交信息 定期从远程仓库拉取更新 使用分支进行功能开发 及时处理合并冲突 慎用 git reset --hard 命令 重要操作前先创建备份分支 常见问题解决 提交到错误分支：\n1git checkout correct-branch 2git cherry-pick wrong-branch 撤销已推送的提交：\n1git revert \u0026lt;commit\u0026gt; 修改提交信息：\n1git commit --amend 解决冲突：\n1git merge --abort # 取消合并 2git reset --merge # 重置合并 记住：使用 Git 最重要的是理解其工作流程和各个命令的作用，多加练习和实践才能熟练运用。\n","date":"2025年7月24日","img":"https://chongmingsuanjia521.github.io/images/ArticlesCover/git.png","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/posts/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/gitcommands.zh-cn/","series":[],"smallImg":"","tags":[],"timestamp":1753359677,"title":"Git常用命令"},{"authors":[],"categories":[{"title":"Git","url":"/categories/git/"}],"content":"Summary.\nContent.\n","date":"2025年7月24日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2025/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","series":[],"smallImg":"","tags":[{"title":"Git","url":"/tags/git/"},{"title":"命令","url":"/tags/%E5%91%BD%E4%BB%A4/"}],"timestamp":1753328592,"title":"Git常用命令"},{"authors":[],"categories":[],"content":"我是傻逼\n","date":"2025年7月23日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":1753228800,"title":"关于我"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Arch Linux.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/archlinux/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Arch Linux","url":"/tags/arch-linux/"}],"timestamp":1662475343,"title":"Install on Arch Linux"},{"authors":[],"categories":[],"content":"A fast, responsive and feature-rich Hugo theme for blog and documentations site.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/introduction/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[],"timestamp":1662475343,"title":"Introduction"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Ubuntu.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/ubuntu/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Ubuntu","url":"/tags/ubuntu/"}],"timestamp":1662475343,"title":"Install on Ubuntu"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Windows.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/windows/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Windows","url":"/tags/windows/"}],"timestamp":1662475343,"title":"Install on Windows"},{"authors":[],"categories":[],"content":"See also README.md.\n","date":"2022年4月17日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2022/04/readme/","series":[],"smallImg":"","tags":[{"title":"README","url":"/tags/readme/"}],"timestamp":1650184529,"title":"README"},{"authors":[],"categories":[],"content":"","date":"1年1月1日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/authors/chongmingsuanjia/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Chongmingsuanjia"},{"authors":[],"categories":[],"content":"","date":"1年1月1日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"},{"authors":[],"categories":[],"content":"","date":"1年1月1日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"联系我"}]
